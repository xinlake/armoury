import groovy.json.JsonOutput
import groovy.json.JsonSlurper

def buildMajor = 1 //10bit
def buildMinor = 0 //6bit
def buildRevision = 0 //6bit

def buildInfo = updateBuildInfo()
ext {
    versionCode = (buildMajor << 22) | (buildMinor << 16) | (buildRevision << 10) | (buildInfo.Number & 0x3FF)
    versionName = "$buildMajor.$buildMinor.$buildRevision-alpha7c" //$buildInfo.Number
}

// build info ======================================================================================
BuildInfo updateBuildInfo() {
    File fileBuildInfo = new File("${projectDir.path}/build-info.json")
    def jsonBuildInfo

    if (fileBuildInfo.canRead()) {
        jsonBuildInfo = new JsonSlurper().parseText(fileBuildInfo.text)

        // Update data to the current information
        jsonBuildInfo.Number++
        jsonBuildInfo.Time = new Date().format("yyyy-MM-dd")
        jsonBuildInfo.Host = "${InetAddress.localHost.hostName}"
        jsonBuildInfo.User = "${System.getProperty("user.name")}"
    } else {
        jsonBuildInfo = [
            Number: 0,
            Time  : new Date().format("yyyy-MM-dd"),
            Host  : "${InetAddress.localHost.hostName}",
            User  : "${System.getProperty("user.name")}"
        ]
    }

    // Save data to json file
    def jsonString = JsonOutput.toJson(jsonBuildInfo)
    def jsonBeauty = JsonOutput.prettyPrint(jsonString)
    fileBuildInfo.write(jsonBeauty)

    return new BuildInfo(
        Number: jsonBuildInfo.Number,
        Time: jsonBuildInfo.Time,
        Host: jsonBuildInfo.Host,
        User: jsonBuildInfo.User
    )
}

class BuildInfo {
    public int Number
    public String Time
    public String Host
    public String User
}
