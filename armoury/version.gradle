import groovy.json.JsonOutput
import groovy.json.JsonSlurper

def buildInfo = updateBuildInfo()
ext {
    versionMajor = 1 //10bit
    versionMinor = 0 //6bit
    versionRevision = 0 //6bit

    versionCode = (versionMajor << 22) | (versionMinor << 16) | (versionRevision << 10) |
        (buildInfo.Number & 0x3FF)
    versionName = "$versionMajor.$versionMinor.$versionRevision-Alpha3"//$buildInfo.Number
}

// build info ======================================================================================
BuildInfo updateBuildInfo() {
    File fileBuildInfo = new File("${projectDir.path}/build-info.json")
    def jsonBuildInfo

    if (fileBuildInfo.canRead()) {
        jsonBuildInfo = new JsonSlurper().parseText(fileBuildInfo.text)

        // Update data to the current information
        jsonBuildInfo.Number++
        jsonBuildInfo.Time = new Date().format("yyyy-MM-dd")
        jsonBuildInfo.Host = "${System.getProperty("user.name")}@${InetAddress.localHost.hostName}"
    } else {
        jsonBuildInfo = [
            Number: 0,
            Time  : new Date().format("yyyy-MM-dd"),
            Host  : "${System.getProperty("user.name")}@${InetAddress.localHost.hostName}"
        ]
    }

    // Save data to json file
    def jsonString = JsonOutput.toJson(jsonBuildInfo)
    def jsonBeauty = JsonOutput.prettyPrint(jsonString)
    fileBuildInfo.write(jsonBeauty)

    return new BuildInfo(
        Number: jsonBuildInfo.Number,
        Time: jsonBuildInfo.Time,
        Host: jsonBuildInfo.Host
    )
}

class BuildInfo {
    public int Number
    public String Time
    public String Host
}
